{"version":3,"sources":["components/Navbar.jsx","components/Form.jsx","components/Aboutus.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","title","mode","toggleMode","className","to","type","id","role","onChange","htmlFor","Form","heading","useState","text","setText","style","height","for","value","e","target","rows","onClick","toLocaleUpperCase","length","split","filter","element","protoTypes","PropTypes","string","aboutText","Aboutus","myStyle","color","backgroundColor","borderColor","App","setMode","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af7a70d5.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Navbar({ title, mode, toggleMode }) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"#\">\r\n            {title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <Link\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  to=\"#\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-bs-toggle=\"dropdown\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Dropdown\r\n                </Link>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li>\r\n                    <Link className=\"dropdown-item\" to=\"#\">\r\n                      Action\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link className=\"dropdown-item\" to=\"#\">\r\n                      Another action\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <hr className=\"dropdown-divider\" />\r\n                  </li>\r\n                  <li>\r\n                    <Link className=\"dropdown-item\" to=\"#\">\r\n                      Something else here\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link disabled\">Disabled</Link>\r\n              </li>\r\n            </ul>\r\n\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                mode === \"dark\" ? \"light\" : \"dark\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckCheckedDisabled\"\r\n                onChange={toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckCheckedDisabled\"\r\n              >\r\n                {mode}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.protoTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Form({ heading, mode }) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  function convertToUpperCase() {\r\n    setText(text.toLocaleUpperCase());\r\n  }\r\n\r\n  function changeHandler(e) {\r\n    setText(e.target.value);\r\n  }\r\n\r\n  function clearTextHandler(e) {\r\n    setText(\"\");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={mode === \"light\" ? `bg-light` : `bg-secondary text-white`}\r\n      style={{ height: 1000 }}\r\n    >\r\n      <div className={`container`}>\r\n        <div className=\"mb-3\">\r\n          <label for=\"exampleFormControlTextarea1\" className=\"form-label\">\r\n            <h1> {heading} </h1>\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"exampleFormControlTextarea1\"\r\n            onChange={changeHandler}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <button className=\"btn btn-primary m-2\" onClick={convertToUpperCase}>\r\n          ConvertToUpperCase\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary m-2\" onClick={clearTextHandler}>\r\n          Clear Text\r\n        </button>\r\n\r\n        <div className=\"container my-3\">\r\n          <h1>The total number of words : </h1>\r\n          <p>\r\n            {text.length} character and{\" \"}\r\n            {text.length === 0\r\n              ? 0\r\n              : text.split(\" \").filter((element) => {\r\n                  return element.length !== 0;\r\n                }).length}{\" \"}\r\n            words\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Aboutus({ mode }) {\r\n  let myStyle = {\r\n    color: mode === \"dark\" ? \"white\" : \"#042743\",\r\n    backgroundColor: mode === \"dark\" ? \"#042743\" : \"white\",\r\n    borderColor: mode === \"dark\" ? \"white\" : \"#042743\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container  my-2\"\r\n      style={{ color: mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n    >\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={myStyle}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport Navbar from \"./components/Navbar\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\nimport Aboutus from \"./components/Aboutus\";\nimport { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  function toggleMode() {\n    setMode(mode === \"light\" ? \"dark\" : \"light\");\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Utils\" mode={mode} toggleMode={toggleMode} />\n        <Switch>\n          <Route path=\"/about\">\n            <Aboutus mode={mode} />\n          </Route>\n          <Router path=\"/\">\n            <Form heading=\"Enter about you here\" mode={mode} />\n          </Router>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}